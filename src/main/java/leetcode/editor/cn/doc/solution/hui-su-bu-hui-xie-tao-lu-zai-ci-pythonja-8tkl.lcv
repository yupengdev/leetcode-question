## 视频讲解

请看[【基础算法精讲 14】](https://www.bilibili.com/video/BV1mG4y1A7Gu/)，制作不易，欢迎点赞~

## 方法一：输入的视角（选或不选）

对于输入的 $\textit{nums}$，考虑每个 $\textit{nums}[i]$ 是选还是不选，由此组合出 $2^n$ 个不同的子集。

$\textit{dfs}$ 中的 $i$ 表示当前考虑到 $\textit{nums}[i]$ 选或不选。

* [sol-Python3]

```py
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        path = []
        n = len(nums)
        
        def dfs(i: int) -> None:
            if i == n:  # 子集构造完毕
                ans.append(path.copy())  # 复制 path，也可以写 path[:]
                return
                
            # 不选 nums[i]
            dfs(i + 1)
            
            # 选 nums[i]
            path.append(nums[i])
            dfs(i + 1)
            path.pop()  # 恢复现场
            
        dfs(0)
        return ans
```

* [sol-Java]

```java
class Solution {
    private final List<List<Integer>> ans = new ArrayList<>();
    private final List<Integer> path = new ArrayList<>();
    private int[] nums;

    public List<List<Integer>> subsets(int[] nums) {
        this.nums = nums;
        dfs(0);
        return ans;
    }

    private void dfs(int i) {
        if (i == nums.length) { // 子集构造完毕
            ans.add(new ArrayList<>(path)); // 复制 path
            return;
        }
        
        // 不选 nums[i]
        dfs(i + 1);
        
        // 选 nums[i]
        path.add(nums[i]);
        dfs(i + 1);
        path.remove(path.size() - 1); // 恢复现场
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> path;
        int n = nums.size();
        auto dfs = [&](this auto&& dfs, int i) -> void {
            if (i == n) { // 子集构造完毕
                ans.emplace_back(path);
                return;
            }

            // 不选 nums[i]
            dfs(i + 1);

            // 选 nums[i]
            path.push_back(nums[i]);
            dfs(i + 1);
            path.pop_back(); // 恢复现场
        };
        dfs(0);
        return ans;
    }
};
```

* [sol-Go]

```go
func subsets(nums []int) [][]int {
    n := len(nums)
    ans := make([][]int, 0, 1<<n) // 预分配空间
    path := make([]int, 0, n) // 预分配空间
    var dfs func(int)
    dfs = func(i int) {
        if i == n { // 子集构造完毕
            ans = append(ans, slices.Clone(path)) // 复制 path
            return
        }
        
        // 不选 nums[i]
        dfs(i + 1)
        
        // 选 nums[i]
        path = append(path, nums[i])
        dfs(i + 1)
        path = path[:len(path)-1] // 恢复现场
    }
    dfs(0)
    return ans
}
```

* [sol-JavaScript]

```js
var subsets = function(nums) {
    const n = nums.length;
    const ans = []
    const path = []
    function dfs(i) {
        if (i === n) { // 子集构造完毕
            ans.push(path.slice()); // 复制 path
            return;
        }
        
        // 不选 nums[i]
        dfs(i + 1);
        
        // 选 nums[i]
        path.push(nums[i]);
        dfs(i + 1);
        path.pop(); // 恢复现场
    }
    dfs(0);
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {
        fn dfs(nums: &[i32], i: usize, path: &mut Vec<i32>, ans: &mut Vec<Vec<i32>>) {
            let n = nums.len();
            if i == n {
                ans.push(path.clone()); // 子集构造完毕
                return;
            }

            // 不选 nums[i]
            dfs(nums, i + 1, path, ans);

            // 选 nums[i]
            path.push(nums[i]);
            dfs(nums, i + 1, path, ans);
            path.pop(); // 恢复现场
        }

        let n = nums.len();
        let mut ans = Vec::with_capacity(1 << n); // 预分配空间
        let mut path = Vec::with_capacity(n); // 预分配空间
        dfs(&nums, 0, &mut path, &mut ans);
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n2^n)$，其中 $n$ 为 $\textit{nums}$ 的长度。每次都是选或不选，递归次数为一个满二叉树的节点个数，那么一共会递归 $\mathcal{O}(2^n)$ 次（等比数列和），再算上加入答案时复制 $\textit{path}$ 需要 $\mathcal{O}(n)$ 的时间，所以时间复杂度为 $\mathcal{O}(n2^n)$。
- 空间复杂度：$\mathcal{O}(n)$。返回值的空间不计。

## 方法二：答案的视角（枚举选哪个）

枚举子集（答案）的第一个数选谁，第二个数选谁，第三个数选谁，依此类推。

$\textit{dfs}$ 中的 $i$ 表示现在要枚举选 $\textit{nums}[i]$ 到 $\textit{nums}[n-1]$ 中的一个数，添加到 $\textit{path}$ 末尾。

如果选 $\textit{nums}[j]$ 添加到 $\textit{path}$ 末尾，那么下一个要添加到 $\textit{path}$ 末尾的数，就要在 $\textit{nums}[j+1]$ 到 $\textit{nums}[n-1]$ 中枚举了。

注意：不需要在回溯中判断 $i=n$ 的边界情况，因为此时不会进入循环，`if i == n: return` 这句话写不写都一样。

* [sol-Python3]

```py
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        path = []
        n = len(nums)
        def dfs(i: int) -> None:
            ans.append(path.copy())  # 复制 path
            for j in range(i, n):  # 枚举选择的数字
                path.append(nums[j])
                dfs(j + 1)
                path.pop()  # 恢复现场
        dfs(0)
        return ans
```

* [sol-Java]

```java
class Solution {
    private final List<List<Integer>> ans = new ArrayList<>();
    private final List<Integer> path = new ArrayList<>();
    private int[] nums;

    public List<List<Integer>> subsets(int[] nums) {
        this.nums = nums;
        dfs(0);
        return ans;
    }

    private void dfs(int i) {
        ans.add(new ArrayList<>(path)); // 复制 path
        for (int j = i; j < nums.length; j++) { // 枚举选择的数字
            path.add(nums[j]);
            dfs(j + 1);
            path.remove(path.size() - 1); // 恢复现场
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> path;
        int n = nums.size();
        auto dfs = [&](this auto&& dfs, int i) -> void {
            ans.emplace_back(path);
            for (int j = i; j < n; j++) { // 枚举选择的数字
                path.push_back(nums[j]);
                dfs(j + 1);
                path.pop_back(); // 恢复现场
            }
        };
        dfs(0);
        return ans;
    }
};
```

* [sol-Go]

```go
func subsets(nums []int) [][]int {
    n := len(nums)
    ans := make([][]int, 0, 1<<n) // 预分配空间
    path := make([]int, 0, n) // 预分配空间
    var dfs func(int)
    dfs = func(i int) {
        ans = append(ans, slices.Clone(path)) // 复制 path
        for j := i; j < n; j++ { // 枚举选择的数字
            path = append(path, nums[j])
            dfs(j + 1)
            path = path[:len(path)-1] // 恢复现场
        }
    }
    dfs(0)
    return ans
}
```

* [sol-JavaScript]

```js
var subsets = function(nums) {
    const n = nums.length;
    const ans = []
    const path = []
    function dfs(i) {
        ans.push(path.slice()); // 复制 path
        for (let j = i; j < n; j++) { // 枚举选择的数字
            path.push(nums[j]);
            dfs(j + 1);
            path.pop(); // 恢复现场
        }
    }
    dfs(0);
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {
        fn dfs(nums: &[i32], i: usize, path: &mut Vec<i32>, ans: &mut Vec<Vec<i32>>) {
            ans.push(path.clone()); // 当前子集加入结果集
            for j in i..nums.len() { // 枚举选择的数字
                path.push(nums[j]);
                dfs(nums, j + 1, path, ans);
                path.pop(); // 恢复现场
            }
        }

        let n = nums.len();
        let mut ans = Vec::with_capacity(1 << n); // 预分配空间
        let mut path = Vec::with_capacity(n); // 预分配空间
        dfs(&nums, 0, &mut path, &mut ans);
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n2^n)$，其中 $n$ 为 $\textit{nums}$ 的长度。答案的长度为子集的个数，即 $2^n$，同时每次递归都把一个数组放入答案，因此会递归 $2^n$ 次，再算上加入答案时复制 $\textit{path}$ 需要 $\mathcal{O}(n)$ 的时间，所以时间复杂度为 $\mathcal{O}(n2^n)$。
- 空间复杂度：$\mathcal{O}(n)$。返回值的空间不计。

## 方法三：二进制枚举

根据 [从集合论到位运算，常见位运算技巧分类总结](https://leetcode.cn/circle/discuss/CaOJ45/) 中的「枚举子集」的技巧，可以只用简单的循环枚举所有子集。

* [sol-Python3]

```py
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        for i in range(1 << len(nums)):  # 枚举全集 U 的所有子集 i
            subset = [x for j, x in enumerate(nums) if i >> j & 1]
            ans.append(subset)
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>(1 << n);
        for (int i = 0; i < (1 << n); i++) { // 枚举全集 U 的所有子集 i
            List<Integer> subset = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                if ((i >> j & 1) == 1) { // j 在集合 i 中
                    subset.add(nums[j]);
                }
            }
            ans.add(subset);
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans(1 << n);
        for (int i = 0; i < (1 << n); i++) { // 枚举全集 U 的所有子集 i
            for (int j = 0; j < n; j++) {
                if (i >> j & 1) { // j 在集合 i 中
                    ans[i].push_back(nums[j]);
                }
            }
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func subsets(nums []int) [][]int {
    ans := make([][]int, 1<<len(nums))
    for i := range ans { // 枚举全集 U 的所有子集 i
        for j, x := range nums {
            if i>>j&1 == 1 { // j 在集合 i 中
                ans[i] = append(ans[i], x)
            }
        }
    }
    return ans
}
```

* [sol-JavaScript]

```js
var subsets = function(nums) {
    const n = nums.length;
    const ans = [];
    for (let i = 0; i < (1 << n); i++) { // 枚举全集 U 的所有子集 i
        const subset = [];
        for (let j = 0; j < n; j++) {
            if (i >> j & 1) { // j 在集合 i 中
                subset.push(nums[j]);
            }
        }
        ans.push(subset);
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {
        (0..1 << nums.len()).map(|i| {
            nums.iter()
                .enumerate()
                .filter(|&(j, _)| (i >> j) & 1 == 1)
                .map(|(_, &x)| x)
                .collect()
        }).collect()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n2^n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。返回值的空间不计。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. 【本题相关】[链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
