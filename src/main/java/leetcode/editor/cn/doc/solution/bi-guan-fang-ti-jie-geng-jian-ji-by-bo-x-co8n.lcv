### 解题思路

此处撰写解题思路

### 代码

* python3

```python
class DLinkedNode:
    def __init__(self, key=0, value=0):
        self.key = key
        self.value = value
        self.pre = None
        self.next = None


# 按照淘汰链表尾巴的规则来吧
class LRUCache:

    def __init__(self, capacity: int):
        self.cache = {}
        # 加上伪头部和伪首部哨兵
        self.head = DLinkedNode()
        self.tail = DLinkedNode()
        self.head.next = self.tail
        self.tail.pre = self.head
        self.capacity = capacity
        
        # 这个应该可以改用使用实时size，直接去获取字典的大小
        # self.size = 0



    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        
        # 这里要注意，get方法也得刷新缓存的顺序
        # 从尾部迁移到头部，其实也可以统一作废它在，挪到头部。
        node = self.cache[key]
        if node != self.head.next:
            self.delNode(node)
            self.addToHead(node)
        return node.value
            
            




    def put(self, key: int, value: int) -> None:
        node = DLinkedNode(key,value)
        if key not in self.cache:
            if len(self.cache) >= self.capacity:
                del self.cache[self.tail.pre.key]
                self.delNode(self.tail.pre)
            self.addToHead(node)
        else:
            self.delNode(self.cache[key])
            self.addToHead(node)
        self.cache[key] = node    

    def delNode(self,node):
        node.pre.next = node.next
        node.next.pre = node.pre

    def addToHead(self,node):
        node.pre = self.head
        node.next = self.head.next
        self.head.next.pre = node
        self.head.next = node
        

    





# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
```

